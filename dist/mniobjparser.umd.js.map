{"version":3,"file":"mniobjparser.umd.js","sources":["../src/MniObjParser.js","../src/main.js"],"sourcesContent":["/**\n* MniObjParser is a parser of mniobj surface files. This version is an atempt of\n* making a free from dependency independant module. It is based on the code witten\n* by Nicolas Kassis and Tarek Sherif for BrainBrowser\n* (https://brainbrowser.cbrain.mcgill.ca).\n*\n* Since mniobj file can be huge, it may be a good idea to call that froma worker.\n*\n* @author: Jonathan Lurie (github.com/jonathanlurie)\n* @author: Nicolas Kassis\n* @author: Tarek Sherif\n*/\n\nclass MniObjParser{\n\n  /**\n  * Constructor of the MniObjParser.\n  */\n  constructor(){\n    this._stack = null;\n    this._stackIndex = null;\n    this._tempResult = null;\n    this._shapeData = null;\n  }\n\n\n  /**\n  * Copy an existing MniObjParser instance.\n  * This is particularly usefull in the context of a worker, if an MniObjParser\n  * is returned, it is using a JSON format to transfer, meaning all the methods\n  * are lost and only remains the data. This is to rebuild a proper MniObjParser.\n  * @param {MniObjParser} MniObjParserInstance - the instance to copy the data from.\n  */\n  copy(MniObjParserInstance){\n    this._stack = MniObjParserInstance._stack;\n    this._stackIndex = MniObjParserInstance._stackIndex\n    this._tempResult = MniObjParserInstance._tempResult\n    this._shapeData = MniObjParserInstance._shapeData;\n  }\n\n\n  /**\n  * Parse the nmiobj string.\n  * @param {String} objString - This string is obviously taken out of a obj file\n  */\n  parse(objString) {\n    try{\n      this._parseRawData( objString );\n      this._arrangeData();\n    }catch(e){\n      console.warn(\"MNI OBJ file is invalid.\");\n      console.warn(e);\n    }\n  }\n\n\n  /**\n  * Parse a obj string\n  * @param {String} objString - content of the obj file\n  */\n  _parseRawData( objString ){\n    this._stack = objString.trim().split(/\\s+/).reverse();\n    this._stackIndex = this._stack.length - 1;\n    this._tempResult = {};\n\n    var objectClass = this._popStack();\n    var start, end, nitems;\n    var indices, endIndices;\n    var lineIndices = null;\n    var lineIndexSize, lineIndexCounter;\n\n    this._tempResult.type = objectClass === \"P\" ? \"polygon\" :\n                  objectClass === \"L\" ? \"line\" :\n                  objectClass;\n\n    if(this._tempResult.type === \"polygon\") {\n      this._parseSurfProp();\n      this._tempResult.numVertices = parseInt(this._popStack(), 10);\n      this._parseVertices();\n      this._parseNormals();\n      this._tempResult.nitems = parseInt(this._popStack(), 10);\n    } else if (this._tempResult.type === \"line\") {\n      this._parseSurfProp();\n      this._tempResult.numVertices = parseInt(this._popStack(), 10);\n      this._parseVertices();\n      this._tempResult.nitems = parseInt(this._popStack(), 10);\n    } else {\n      this._tempResult.error = true;\n      this._tempResult.errorMessage = 'Invalid MNI Object class: must be \"polygon\" or \"line\"';\n      return;\n    }\n\n    this._parseColors();\n    this._parseEndIndices();\n    this._parseIndices();\n\n    if (this._tempResult.type === \"polygon\" ) {\n\n    } else if (this._tempResult.type === \"line\") {\n      indices = this._tempResult.indices;\n      endIndices = this._tempResult.endIndices;\n      nitems = this._tempResult.nitems;\n      lineIndexSize = lineIndexCounter = 0;\n\n      for (var i = 0; i < nitems; i++){\n        if (i === 0){\n          start = 0;\n        } else {\n          start = endIndices[i - 1];\n        }\n\n        end = endIndices[i];\n        lineIndexSize += (end - start - 1) * 2;\n      }\n\n      lineIndices = new Uint32Array(lineIndexSize);\n\n      for (var i = 0; i < nitems; i++){\n        if (i === 0){\n          start = 0;\n        } else {\n          start = endIndices[i - 1];\n        }\n\n        lineIndices[lineIndexCounter++] = indices[start];\n        end = endIndices[i];\n\n        for (var j = start + 1; j < end - 1; j++) {\n          lineIndices[lineIndexCounter++] = indices[j];\n          lineIndices[lineIndexCounter++] = indices[j];\n        }\n\n        lineIndices[lineIndexCounter++] = indices[end - 1];\n      }\n\n      this._tempResult.indices = lineIndices;\n    }\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Rearange the data from _tempResult to _shapeData\n  */\n  _arrangeData() {\n\n      this._shapeData = {\n        type: this._tempResult.type,\n        vertices: this._tempResult.vertices,\n        normals: this._tempResult.normals,\n        colors: this._tempResult.colors,\n        surfaceProperties: this._tempResult.surfaceProperties,\n        error: this._tempResult.error,\n        errorMessage: this._tempResult.errorMessage\n      };\n\n      var transfer = [\n        this._shapeData.vertices.buffer,\n        this._shapeData.colors.buffer\n      ];\n\n      if (this._shapeData.normals) {\n        transfer.push(this._shapeData.normals.buffer);\n      }\n\n      this._shapeData.shapes = this._tempResult.indices;\n      \n      transfer.push(\n        this._tempResult.indices.buffer\n      );\n      \n\n      // unroll colors if necessary\n      if(this._shapeData.colors.length === 4) {\n        this._unrollColors();\n      }\n  }\n\n\n  /**\n  * [PRIVATE]\n  * From a single color, make a typed array (Uint8) of colors.\n  */\n  _unrollColors(){\n    var dataColor0, dataColor1, dataColor2, dataColor3;\n    var count;\n    var nbTriangles = this._shapeData.vertices.length / 3;\n    var arraySize = nbTriangles * 4;\n    var unrolledColors = new Uint8Array(arraySize);\n\n    dataColor0 = this._shapeData.colors[0];\n    dataColor1 = this._shapeData.colors[1];\n    dataColor2 = this._shapeData.colors[2];\n    dataColor3 = this._shapeData.colors[3];\n\n    for(var i=0; i<arraySize; i+=4){\n      unrolledColors[i]     = dataColor0 * 255;\n      unrolledColors[i + 1] = dataColor1 * 255;\n      unrolledColors[i + 2] = dataColor2 * 255;\n      unrolledColors[i + 3] = dataColor3 * 255;\n    }\n\n    this._shapeData.colors = unrolledColors;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Parse surface properties from the raw data.\n  */\n  _parseSurfProp() {\n    if (this._tempResult.type === \"polygon\") {\n      this._tempResult.surfaceProperties = {\n        ambient: parseFloat(this._popStack()),\n        diffuse: parseFloat(this._popStack()),\n        specularReflectance: parseFloat(this._popStack()),\n        specularScattering: parseFloat(this._popStack()),\n        transparency: parseFloat(this._popStack())\n      };\n\n    }else if (this._tempResult.type === \"line\") {\n      this._tempResult.surfaceProperties = {\n        width: this._popStack()\n      };\n    }\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Parse the vertices from the raw data.\n  */\n  _parseVertices() {\n    var count = this._tempResult.numVertices * 3;\n    var vertices = new Float32Array(count);\n    var that = this;\n\n    for (var i = 0; i < count; i++) {\n      vertices[i] = parseFloat(this._popStack());\n    }\n\n    this._tempResult.vertices = vertices;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Parse the normal vector from the raw data.\n  */\n  _parseNormals() {\n    var count = this._tempResult.numVertices * 3;\n    var normals = new Float32Array(count);\n\n    for (var i = 0; i < count; i++) {\n      normals[i] = parseFloat(this._popStack());\n    }\n\n    this._tempResult.normals = normals;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Parse the color from the raw data.\n  */\n  _parseColors() {\n    var colorFlag = parseInt(this._popStack(), 10);\n    var colors;\n    var count;\n\n    if (colorFlag === 0) {\n      colors = new Float32Array(4);\n      for (var i = 0; i < 4; i++){\n        colors[i] = parseFloat(this._popStack());\n      }\n    } else if (colorFlag === 1) {\n      count = this._tempResult.num_polygons * 4;\n      colors = new Float32Array(count);\n      for (var i = 0; i < count; i++){\n        colors[i] = parseFloat(this._popStack());\n      }\n    } else if (colorFlag === 2) {\n      count = this._tempResult.numVertices * 4;\n      colors = new Float32Array(count);\n      for (var i = 0; i < count; i++){\n        colors[i] = parseFloat(this._popStack());\n      }\n    } else {\n      this._tempResult.error = true;\n      this._tempResult.errorMessage = \"Invalid color flag: \" + colorFlag;\n    }\n\n    this._tempResult.colorFlag = colorFlag;\n    this._tempResult.colors = colors;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Not sure how useful endIndices are, it was used in BrainBrowser so I kept them.\n  * (is that useful?)\n  */\n  _parseEndIndices(){\n    var count = this._tempResult.nitems;\n    var endIndices = new Uint32Array(count);\n\n    for(var i = 0; i < count; i++){\n      endIndices[i] = parseInt(this._popStack(), 10);\n    }\n\n    this._tempResult.endIndices = endIndices;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * Reads the vertices indices to use to make triangles.\n  */\n  _parseIndices() {\n    var count = this._stackIndex + 1;\n    var indices = new Uint32Array(count);\n\n    for (var i = 0; i < count; i++) {\n      indices[i] = parseInt(this._popStack(), 10);\n    }\n\n    this._tempResult.indices = indices;\n  }\n\n\n  /**\n  * [PRIVATE]\n  * pop the raw data (big string file)\n  * @return {String}\n  */\n  _popStack() {\n    return this._stack[this._stackIndex--];\n  }\n\n\n  /**\n  * Get if the file is valid, after an atempt of parsing\n  * @return {Boolean} true if valid, false if invalid\n  */\n  isValid(){\n    return (!this._shapeData.error);\n  }\n  \n  \n  /**\n  * Get the error message if any\n  * @return {String} the error message, or null if any\n  */\n  getErrorMessage(){\n    return this._shapeData.errorMessage\n  }\n\n\n  /**\n  * [DEBUGGING]\n  * @return {Object} the entire shapeData object.\n  */\n  getShapeData () {\n    return this._shapeData;\n  }\n\n\n  /**\n  * Returns the index of vertices to be used to make triangles, as a typed array.\n  * @return {Uint32Array} Since triangles have 3 vertices, the array contains index such as\n  * [i0, i1, i2, i0, i1, i2, ...].\n  */\n  getShapeRawIndices() {\n    if( this._shapeData.error ){\n      console.warn(\"ERROR while parsing: \" + this._shapeData.errorMessage);\n      return null;\n    }\n    \n    return this._shapeData.shapes;\n  }\n\n\n  /**\n  * Returns the vertice position as a typed array.\n  * @return {Float32Array} of points encoded like [x, y, z, x, y, z, ...]\n  */\n  getRawVertices() {\n    if( this._shapeData.error ){\n      console.warn(\"ERROR while parsing: \" + this._shapeData.errorMessage);\n      return null;\n    }\n    \n    return this._shapeData.vertices;\n  }\n\n\n  /**\n  * Returns the normal vectors as a typed array.\n  * @return {Float32Array} of normal vector encoded like [x, y, z, x, y, z, ...]\n  */\n  getRawNormals() {\n    if( this._shapeData.error ){\n      console.warn(\"ERROR while parsing: \" + this._shapeData.errorMessage);\n      return null;\n    }\n    \n    return this._shapeData.normals;\n  }\n\n\n  /**\n  * Get the colors encoded like [r, g, b, a, r, g, b, a, ...]\n  * @return {Float32Array} of size 4 or of size 4xnumOfVertices\n  */\n  getRawColors(){\n    if( this._shapeData.error ){\n      console.warn(\"ERROR while parsing: \" + this._shapeData.errorMessage);\n      return null;\n    }\n    \n    return this._shapeData.colors;\n  }\n\n\n  /**\n  * The surface properties contains transparency info about specularity transparency\n  * and other nice light-related behaviour thingies.\n  * May be used when building a material, but this is not mandatory.\n  * @return {Object}\n  */\n  getSurfaceProperties(){\n    if( this._shapeData.error ){\n      console.warn(\"ERROR while parsing: \" + this._shapeData.errorMessage);\n      return null;\n    }\n    \n    return this._shapeData.surfaceProperties;\n  }\n\n\n  /**\n  * Get the type of mesh.\n  * @return {String} \"polygon\" or \"line\"\n  */ \n  getType(){\n    return this._shapeData.type;\n  }\n  \n  \n  /**\n  * Get wether of not the output is a 3D polygon  type\n  * @return {Boolean}\n  */\n  isPolygon(){\n    return (this._shapeData.type === \"polygon\");\n  }\n  \n  \n  /**\n  * Get wether of not the output is a line  type\n  * @return {Boolean}\n  */\n  isLine(){\n    return (this._shapeData.type === \"line\");\n  }\n\n} /* END of class MniObjParser */\n\nexport { MniObjParser };\n","// if we wanted to use foo here:\n\n// but we just want to make it accessible:\nexport { MniObjParser } from './MniObjParser.js';\n"],"names":["MniObjParser","_stack","_stackIndex","_tempResult","_shapeData","MniObjParserInstance","objString","_parseRawData","_arrangeData","e","console","warn","trim","split","reverse","length","objectClass","_popStack","start","end","nitems","indices","endIndices","lineIndices","lineIndexSize","lineIndexCounter","type","_parseSurfProp","numVertices","parseInt","_parseVertices","_parseNormals","error","errorMessage","_parseColors","_parseEndIndices","_parseIndices","i","Uint32Array","j","vertices","normals","colors","surfaceProperties","transfer","buffer","push","shapes","_unrollColors","dataColor0","dataColor1","dataColor2","dataColor3","nbTriangles","arraySize","unrolledColors","Uint8Array","ambient","parseFloat","diffuse","specularReflectance","specularScattering","transparency","width","count","Float32Array","colorFlag","num_polygons"],"mappings":"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"}